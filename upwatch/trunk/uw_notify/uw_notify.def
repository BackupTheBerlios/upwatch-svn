AutoGen Definitions options;
export        = "#define progOptions uw_notifyOptions";
prog-name     = uw_notify;
prog-title    = "Upwatch parallel probe daemon";
version       = `cat ../VERSION`;
homerc        = `echo $sysconfdir/upwatch.conf`;
homerc        = `echo $confdir/uw_notify.conf`;
homerc        = "$HOME/.upwatchrc";
homerc        = "$HOME";
homerc        = "$$/upwatch.conf";
homerc        = "$$/uw_notify.conf";
detail        = 
'uw_notify reads probe resultfiles, and stores them in the database';

// this section is for the generated specfile
spec-requires = "/usr/bin/mysql glib2";
spec-files = `echo "%attr(0770,root,upwatch)" $sbindir/uw_notify`;
spec-files = `echo "%attr(0770,root,upwatch) %dir " $spooldir/uw_notify`;
spec-files = `echo "%attr(0770,root,upwatch) %dir " $spooldir/uw_notify/new`;
spec-files = `echo "%attr(0770,root,upwatch) %dir " $spooldir/uw_notify/tmp`;

// describe commandline flags
flag = {
    name      = compress;
    value     = C;
    arg_type  = number;
    arg-default = 9;
    arg-range = '0->9';
    descrip   = "XML compression factor";
    doc       =
'The generated resultfile, will normally be compressed to save datatraffic costs.
The compression can be set between 0 no (compression) and 9 (highest compression).
Decompression is automatic';
};

flag = {
    name      = spooldir;
    value     = S;
    arg_type  = string;
    descrip   = "maildir-type spooldirectory for result files";
    doc       =
'This parameter denotes the basedirectory for reading input files. Inside
this directory another directory is expected named by the `input` parameter.
Inside this directory directories called `tmp` and `new` should exist. All files
will be read from `new`. You should set up some cron job that
removes any files in `tmp` that are older then 36 hours. For some more info
about maildir see http://www.qmail.org/man/man5/maildir.html.';
};

// describe commandline flags
flag = {
    name      = input;
    value     = I;
    arg_type  = string;
    stack_arg;
    descrip   = "name of queue to read from";
    doc       =
'The argument is taken to be a maildir under the directory `spooldir`.
Everything placed in this queue is transferred. May be specified more then once.
For every input queue given a new reader process is started';
};

flag = {
    name      = output;
    value     = O;
    stack_arg;
    arg_type  = string;
    descrip   = "name of queue to drop results";
    doc       =
'The argument is taken to be a maildir under the directory `spooldir`.
All results are (after processing) placed in this queue.
This flag may be given multiple times.';
};

flag = {
    name      = failures;
    value     = f;
    arg_type  = string;
    descrip   = "name of queue to store failed transactions";
    doc       =
'For some reason storing results for a particular probe may fail.
These transactions are placed in the queue given here';
};

flag = {
    name      = smtpserver;
    arg_type  = string;
    arg_default = "localhost";
    descrip   = "Outgoing SMTP server";
    doc       =
'SMTP server to send email notifications to';
};

flag = {
    name      = smtpserverport;
    arg_type  = number;
    arg_default = 25;
    descrip   = "Outgoing SMTP server port";
    doc       =
'SMTP server port number to send email notifications to';
};

flag = {
    name      = from-email;
    arg_type  = string;
    arg_default = "beheer@netland.nl";
    descrip   = "Email address for outgoing messages";
};

flag = {
    name      = from-name;
    arg_type  = string;
    arg_default = "CMS Netland Internet Services BV";
    descrip   = "Email name for outgoing messages";
};

flag = {
    name      = copy;
    value     = c;
    arg_type  = string;
    descrip   = "file to copy all transactions to";
    doc       =
'You can copy all transactions to the specified queue, for inspecting
them later';
};

flag = {
    name      = run_queue;
    value     = q;
    descrip   = "Process the queue once, and then exit";
    doc       =
'You might just want to process the files in the queue, and then exit.
This is useful is you want to run uw_notify under cron or for debugging.';
};

flag = {
    name      = query-server-by-name;
    arg_type  = string;
    arg_default = "select id from server where name like '%%%s%%' or names like '%%%s%%'";
    descrip   = "SQL query to find the id of a server given the servername";
    doc       =
'Sometimes a probe only gives a servername, and no id (Big Brother clients do this).
This query will be issued to find the numeric server id in the database. You can specify 
up to five `%s` sequences in the query, they will be replaced with the servername.';
};

flag = {
    name      = query-server-by-id;
    arg_type  = string;
    arg_default = "select name from server where id = '%u'";
    descrip   = "SQL query to find the name of a server given the id";
    doc       =
'Specifically used for notifications, this query should find the name of a server
given its numeric ID.';
};

flag = {
    name      = query-server-by-ip;
    arg_type  = string;
    arg_default = "select server.id from server, ipaddress where ipaddress.id = server.ipaddress and ipaddress.name = '%s'";
    descrip   = "SQL query to find the id of a server given the ip address";
    doc       =
'Sometimes a probe only gives an ipaddress, and no id (iptraf does this).
This query will be issued to find the numeric server id in the database. You can specify
up to five `%s` sequences in the query, they will be replaced with the ip address.';
};

flag = { 
    name      = slave; 
    arg_type  = string;
    descrip   = "Force this instance to act as a slave for the given queue";
    doc       =
'Mostly used in debugging. If you want to debug a particular slave on the queue q_iptraf
then start the debugger and run the program with `-d3 --slave q_iptraf`';
};

#include dbase_options.def
#include generic_options.def
#include license_proprietary.def

