# Process this file with autoconf to produce a configure script.
AC_INIT(upwatch, 0.3, bugs@upwatch.com)
AC_CONFIG_SRCDIR([upwatch/spool.c])

AM_INIT_AUTOMAKE(upwatch, 0.3)
AC_PROG_CC
AC_PROG_GCC_TRADITIONAL
AC_PROG_AWK
AC_PROG_LIBTOOL
AC_PROG_LN_S

AC_ARG_ENABLE(debug,
    [  --enable-debug          Turn on compiler debugging information (default=no)],
    [if eval "test x$enable_debug = xyes"; then
        CFLAGS="-g -Wall"   # note: discard previous CLAGS value
    else
        CFLAGS="${CFLAGS} -Wall -O2"
    fi]
)

################## MYSQL
# path to libmysqlclient stuff:.
AC_ARG_WITH(mysql-libs,
    [  --with-mysql-libs=<path>           prefix of MySQL libraries. Default /usr/lib/mysql],
    [MYSQL_LIB_PREFIX=$with_mysql_libs],
    [MYSQL_LIB_PREFIX=/usr/lib/mysql]
)

# path to mysql includes
AC_ARG_WITH(mysql-include,
    [  --with-mysql-include=<path>        prefix of MySQL headers. Default /usr/include/mysql],
    [MYSQL_INC_PREFIX=$with_mysql_include],
    [MYSQL_INC_PREFIX=/usr/include/mysql]
)

AC_SUBST(MYSQL_LIB_PREFIX)
AC_SUBST(MYSQL_INC_PREFIX)
MYSQL_LIBS="-L${MYSQL_LIB_PREFIX} -lmysqlclient"
MYSQL_CFLAGS="-I${MYSQL_INC_PREFIX}"
AC_SUBST(MYSQL_LIBS)
AC_SUBST(MYSQL_CFLAGS)
if test ! -f "$MYSQL_INC_PREFIX/mysql.h"
then
  AC_MSG_ERROR([Cannot find $MYSQL_INC_PREFIX/mysql.h])
fi


CFLAGS="$CFLAGS $MYSQL_CFLAGS"

################## PCAP
# path to pcap:
AC_ARG_WITH(pcap-libs,
    [  --with-pcap-libs=<path>            prefix of pcap libraries. Default /usr/lib],
    [PCAP_LIB_PREFIX=$with_pcap_libs],
    [PCAP_LIB_PREFIX=/usr/lib]
)

# path to pcap includes
AC_ARG_WITH(pcap-include,
    [  --with-pcap-include=<path>         prefix of pcap headers. Default /usr/include/pcap],
    [PCAP_INC_PREFIX=$with_pcap_include],
    [PCAP_INC_PREFIX=/usr/include/pcap]
)

AC_SUBST(PCAP_LIB_PREFIX)
AC_SUBST(PCAP_INC_PREFIX)
PCAP_LIBS="-L${PCAP_LIB_PREFIX} -lpcap"
PCAP_CFLAGS="-I${PCAP_INC_PREFIX}"
AC_SUBST(PCAP_LIBS)
AC_SUBST(PCAP_CFLAGS)

CFLAGS="$CFLAGS $PCAP_CFLAGS"

################## LIBNET
# libnet
LIBNET_CFLAGS="`libnet-config --cflags`"
LIBNET_CFLAGS="$LIBNET_CFLAGS `libnet-config --defines`"
LIBNET_LIBS="`libnet-config --libs`"
if test -z "$LIBNET_LIBS"
then
  AC_MSG_ERROR([You really need libnet to compile upwatch])
fi
AC_SUBST(LIBNET_CFLAGS)
AC_SUBST(LIBNET_LIBS)
CFLAGS="$CFLAGS $LIBNET_CFLAGS"

################## GLIB2
# glib2 - always need thread libraries
LIBGLIB2_CFLAGS="`pkg-config --cflags gthread-2.0`"
LIBGLIB2_LIBS="`pkg-config --libs gthread-2.0`"
if test -z "$LIBGLIB2_LIBS"
then
  AC_MSG_ERROR([You really need libglib2-devel to compile upwatch])
fi
AC_SUBST(LIBGLIB2_CFLAGS)
AC_SUBST(LIBGLIB2_LIBS)
CFLAGS="$CFLAGS $LIBGLIB2_CFLAGS"

################## GNET
# gnet
LIBGNET_CFLAGS="`gnet-config --cflags`"
LIBGNET_LIBS="`gnet-config --libs`"
if test -z "$LIBGNET_LIBS"
then
  AC_MSG_ERROR([You really need libgnet to compile upwatch])
fi
AC_SUBST(LIBGNET_CFLAGS)
AC_SUBST(LIBGNET_LIBS)
CFLAGS="$CFLAGS $LIBGNET_CFLAGS"

################## XML2
# libxml2 - always need XML libraries
LIBXML2_CFLAGS="`pkg-config --cflags libxml-2.0`"
LIBXML2_LIBS="`pkg-config --libs libxml-2.0`"
if test -z "$LIBXML2_LIBS"
then
  AC_MSG_ERROR([You really need libxml-2.0 to compile upwatch])
fi
AC_SUBST(LIBXML2_CFLAGS)
AC_SUBST(LIBXML2_LIBS)
CFLAGS="$CFLAGS $LIBXML2_CFLAGS"

# Checks for other libraries.
AC_CHECK_LIB([opts], [optionLoadLine], 
  [LIBOPTS_LIBS=-lopts], [AC_MSG_ERROR([Sorry, we need -lopts to continue])])
AC_SUBST(LIBOPTS_LIBS)
# everybody needs libopts
LIBS="$LIBS -lopts"

AC_CHECK_LIB([pthread], [pthread_create], 
  [LIBPTHREAD_LIBS=-lpthread],[AC_MSG_ERROR([Sorry, we need -lpthread to continue])] )
AC_SUBST(LIBPTHREAD_LIBS)

AC_CHECK_LIB([curl], [curl_easy_init], 
  [LIBCURL_LIBS=-lcurl], [AC_MSG_ERROR([Sorry, we need -lcurl to continue])])
AC_SUBST(LIBCURL_LIBS)

AC_CHECK_LIB([pcap], [pcap_close], 
  [LIBPCAP_LIBS=-lpcap], [AC_MSG_ERROR([Sorry, we need -lpcap to continue])])
AC_SUBST(LIBPCAP_LIBS)

AC_CHECK_LIB([gdbm], [gdbm_close], 
  [LIBGDBM_LIBS=-lgdbm], [AC_MSG_ERROR([Sorry, we need -lgdbm to continue])])
AC_SUBST(LIBGDBM_LIBS)

AC_ARG_ENABLE(dmalloc,
    [  --enable-dmalloc         Turn on memoty debugging using the dmalloc library(default=no)],
    [if eval "test x$enable_dmalloc = xyes"; then
        CFLAGS="${CFLAGS} -DDMALLOC"
        LIBS="${LIBS} -ldmallocth"
    fi]
)

AC_ARG_ENABLE(efence,
    [  --enable-efence         Turn on memoty debugging using the ElectricFence library(default=no)],
    [if eval "test x$enable_efence = xyes"; then
        LIBS="${LIBS} -lefence"
    fi]
)

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([arpa/inet.h fcntl.h limits.h malloc.h netdb.h netinet/in.h stdlib.h string.h sys/ioctl.h sys/socket.h sys/time.h syslog.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

# Checks for library functions.
AC_FUNC_MALLOC
AC_FUNC_MKTIME
AC_TYPE_SIGNAL
AC_FUNC_STAT
AC_FUNC_STRFTIME
AC_CHECK_FUNCS([alarm atexit gethostbyname gethostname gettimeofday inet_ntoa memset putenv select socket strdup strerror strncasecmp strrchr strstr tzset])

AM_CONFIG_HEADER(config.h)

AC_CONFIG_FILES([Makefile 
                 upwatch/Makefile 
                 doc/Makefile 
                 uw_accept/Makefile 
                 uw_acceptbb/Makefile 
                 uw_httpget/Makefile 
                 uw_ping/Makefile 
                 uw_sysstat/Makefile 
                 uw_process/Makefile 
                 uw_iptraf/Makefile 
                 uw_notify/Makefile 
                 uw_sysstat/Makefile 
                 uw_investigate/Makefile 
                 uw_send/Makefile]
)
AC_OUTPUT

