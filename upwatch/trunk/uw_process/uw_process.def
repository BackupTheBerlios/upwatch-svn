AutoGen Definitions options;
export        = "#define progOptions uw_processOptions";
prog-name     = uw_process;
prog-title    = "Upwatch parallel probe daemon";
version       = `cat ../VERSION`;
homerc        = "/etc/upwatch.conf";
homerc        = "/etc/upwatch.d/uw_process.conf";
homerc        = "$HOME/.upwatchrc";
homerc        = "$HOME";
homerc        = "$$/upwatch.conf";
homerc        = "$$/uw_process.conf";
detail        = 
'uw_process reads probe resultfiles, and stores them in the database';

// this section is for the generated specfile
spec-requires = "mysql glib2";
spec-install  = "mkdir -p $RPM_BUILD_ROOT/var/spool/upwatch/uw_process/tmp";
spec-install  = "mkdir -p $RPM_BUILD_ROOT/var/spool/upwatch/uw_process/new";
spec-files    = "%attr(0770,root,upwatch) %dir /var/spool/upwatch/uw_process/new";
spec-files    = "%attr(0770,root,upwatch) %dir /var/spool/upwatch/uw_process/tmp";
spec-files    = "%attr(0770,root,upwatch) /usr/sbin/uw_process";

// describe commandline flags
flag = {
    name      = spooldir;
    value     = S;
    arg_type  = string;
    descrip   = "maildir-type spooldirectory for result files";
    doc       =
'This parameter denotes the basedirectory for reading input files. Inside
this directory another directory is expected named by the `input` parameter.
Inside this directory directories called `tmp` and `new` should exist. All files
will be read from `new`. You should set up some cron job that
removes any files in `tmp` that are older then 36 hours. For some more info
about maildir see http://www.qmail.org/man/man5/maildir.html.';
};

// describe commandline flags
flag = {
    name      = input;
    value     = I;
    arg_type  = string;
    arg-default = uw_process;
    descrip   = "name of queue to read from";
    doc       =
'The argument is taken to be a maildir under the directory `spooldir`.
Everything placed in this queue is transferred.';
};

flag = {
    name      = failures;
    value     = f;
    arg_type  = string;
    descrip   = "file to store failed transactions";
    doc       =
'For some reason storing results for a particular probe may fail.
These transactions are kept in the filename given with here';
};

flag = {
    name      = copy;
    value     = c;
    arg_type  = string;
    descrip   = "file to copy all transactions to";
    doc       =
'You can copy all transactions to the specified queue, for inspecting
them later';
};

// describe commandline flags
flag = {
    name      = trust;
    value     = t;
    arg_type  = string;
    stack_arg;
    descrip   = "create definition record for this probe if not found";
    doc       =
'If a probe result is being processed, but no definition is found for it,
create the definition record with default values. This may result in
spurios probe definitions is your input data is not bugfree, or comes
from untrusted sources. You may specify this option for any probetype,
or give the special values `all` or `none`';

};

flag = {
    name      = run_queue;
    value     = q;
    descrip   = "Process the queue once, and then exit";
    doc       =
'You might just want to process the files in the queue, and then exit.
This is useful is you want to run uw_process under cron or for debugging.';
};

flag = {
    name      = serverquery;
    arg_type  = string;
    arg_default = "select id from server where name like '%%%s%%' or names like '%%%s%%'";
    descrip   = "SQL query to find the id of a server given the servername";
    doc       =
'Sometimes a probe only gives a servername, and no id (Big Brother clients do this).
This query will be issued to find the numeric server id in the database. You can specify 
up to five `%s` sequences in the query, they will be replaced with the servername.';
};

#include dbase_options.def
#include generic_options.def
