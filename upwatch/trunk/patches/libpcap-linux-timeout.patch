diff -uNr tcpdump-3.6.2-orig/libpcap-0.6.2/pcap-linux.c tcpdump-3.6.2/libpcap-0.6.2/pcap-linux.c
--- tcpdump-3.6.2-orig/libpcap-0.6.2/pcap-linux.c	Fri Nov  8 00:27:55 2002
+++ tcpdump-3.6.2/libpcap-0.6.2/pcap-linux.c	Fri Nov  8 00:32:24 2002
@@ -235,6 +235,27 @@
 		return NULL;
 	}
 
+        /*
+         * Okay, now we have a packet stream open. Maybe we need to handle
+         * a timeout? In that case we set the filehandle to nonblocking
+         * so pcap_read can try reading the fd and call select if no data
+         * is available at first.
+         */
+
+        if (to_ms > 0) {
+                int     flags = fcntl(handle->fd, F_GETFL);
+                if (flags != -1) {
+                        flags |= O_NONBLOCK;
+                        flags = fcntl(handle->fd, F_SETFL, flags);
+                }
+                if (flags == -1) {
+                        snprintf(ebuf, PCAP_ERRBUF_SIZE, "fcntl: %s",
+                                 pcap_strerror(errno));
+                        pcap_close(handle);
+                        return NULL;
+                }
+        }
+
 	return handle;
 }
 
@@ -246,11 +267,52 @@
 int
 pcap_read(pcap_t *handle, int max_packets, pcap_handler callback, u_char *user)
 {
-	/*
-	 * Currently, on Linux only one packet is delivered per read,
-	 * so we don't loop.
-	 */
-	return pcap_read_packet(handle, callback, user);
+        int             status, packets;
+        fd_set          read_fds;
+        struct timeval  tv;
+
+        /*
+         * Fill in a timeval structure for select if we need to obeye a
+         * timeout.
+         */
+        if (handle->md.timeout > 0) {
+                tv.tv_usec      = (handle->md.timeout % 1000) * 1000;
+                tv.tv_sec       = (handle->md.timeout / 1000);
+        }
+
+        /*
+         * Read packets until the packet limit has been reached or
+         * an error occured while reading. Call the user function
+         * for each received packet.
+         */
+        for (packets = 0; max_packets == -1 || packets < max_packets;)
+        {
+                status = pcap_read_packet(handle, callback, user);
+
+                if (status > 0) {
+                        packets += status;
+                        continue;
+                } else if (status == -1)
+                        return -1;
+
+                /*
+                 * If no packet is available we go to sleep. FIXME: This
+                 * might be better implemented using poll(?)
+                 */
+                FD_ZERO(&read_fds);
+                FD_SET(handle->fd, &read_fds);
+                status = select(handle->fd + 1,
+                                &read_fds, NULL, NULL, &tv);
+                if (status == -1) {
+                        snprintf(handle->errbuf, sizeof(handle->errbuf),
+                                 "select: %s", pcap_strerror(errno));
+                        return -1;
+                } else if (status == 0 ||
+                           (tv.tv_usec == 0 && tv.tv_sec == 0))
+                        return packets;
+        }
+
+        return packets;
 }
 
 /*
