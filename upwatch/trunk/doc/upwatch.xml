<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD Docbook XML V4.1.2//EN"
                      "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<book id="upwatch" lang="en" status="draft">
    <bookinfo>
        <title>Upwatch documentation</title>
        <author>
            <firstname>Ron</firstname>
            <surname>Arts</surname>
        </author>
        <copyright>
            <year>2002</year>
            <holder>UpWatch BV, The Netherlands</holder>
        </copyright>
    </bookinfo>
    <preface>
        <title>Preface</title>
        <para> People, especially managers, like to have facts and figures when taking decisions,
            either because a lot of money may be involved, or their job (or both). If you want to
            prove your website (or switch, or basically any other device) was available, showed the
            proper performance, or just want to know current and past CPU load, you've come to the
            right place.</para>
        <para> UpWatch is scalable, fast, extensible, built on proven opensource tools, and is built
            not to loose data.</para>
    </preface>
    <chapter>
        <title>Installation</title>
        <sect1 id="Getting_upwatch">
            <title>Getting upwatch</title>
            <para> Currently, upwatch is not released, and is not allowed to be distributed. The
                only way to get it, is through written permission of UpWatch BV.</para>
            <para> If you aquired that, you will either receive access to CVS, or will receive a
                tar.gz file, or .RPM's.</para>
        </sect1>
        <sect1 id="Requirements">
            <title>Requirements</title>
            <sect2 id="Run-time_requirements">
                <title>Run-time requirements</title>
                <para> Run time requirements differ per probe. Look in the corresponding .def file
                    (or in the spec file for the probe, here's a list of everything we expect on a
                    machine running all probes, and the database (I'll also list the version we use ourselves):</para>
                <itemizedlist>
                    <listitem><para>glib2 2.0.1</para></listitem>
                    <listitem><para>gnet 1.1.2</para></listitem>
                    <listitem><para>mysql 3.23.49</para></listitem>
                    <listitem><para>cURL 7.9.5</para></listitem>
                    <listitem><para>libnet 1.0.2a</para></listitem>
                    <listitem><para>libpcap 0.6.2</para></listitem>
                </itemizedlist>
            </sect2>
            <sect2 id="Build_requirements">
                <title>Build requirements</title>
                <para> Of course you can build the software yourself. Apart from the normal GNU
                    compilation tools, and the aforementioned packages, you'll need the following on
                    your system to build upwatch:</para>
                <itemizedlist>
                    <listitem><para>autogen 5.3.6</para></listitem>
                    <listitem><para>libxslt 1.0.15</para></listitem>
                    <listitem><para>docbook 1.48</para></listitem>
                    <listitem><para>lynx 2.8.4</para></listitem>
                    <listitem><para>RPM tools, if you want to build RPM's</para></listitem>
                </itemizedlist>
                <para>If you run redhat, debian or SuSe, don't forget to install the devel packages
                    if there are any.</para>
            </sect2>
        </sect1>
        <sect1 id="Compiling_upwatch">
            <title>Compiling upwatch</title>
            <para> Just in case you really want to (or need to) compile upwatch yourself, it's
                pretty easy:</para>
            <literallayout> tar xzvf upwatch-x.x.tar.gz cd upwatch-x.x ./configure make</literallayout>
            <para> Nothing to it... In case of problems, you're probably missing some library or
                header files, or they are in unexpected places. Look in config.log.</para>
        </sect1>
        <sect1 id="Actual_Installation">
            <title>Actual Installation</title>
            <para> Before you install the software decide on the architecture. If you know in
                advance yuo'll have to monitor thousands of hosts, or the probes will exhaust your
                machine otherwise, you may have to split your installation across several machines.
                There may be more reasons to do that. Consult <link linkend="Scaling_up">Scaling
                up</link> and <link linkend="How_it_all_works">How it all works</link>
            </para>
        </sect1>
        <sect1 id="Database">
            <title>Database</title>
            <para> Suppose your machine becomes too small</para>
        </sect1>
    </chapter>
    <chapter id="Configuration">
        <title>Configuration</title>
        <para>
        </para>
    </chapter>
    <chapter id="Administration">
        <title>Administration</title>
        <sect1 id="Logfiles">
            <title>Logfiles</title>
            <para> Suppose your machine becomes too small</para>
        </sect1>
    </chapter>
    <chapter id="How_it_all_works">
        <title>How it all works</title>
        <sect1 id="General_Overview">
            <title>General Overview</title>
            <para> The system primary function is to fill lots of database tables, to offer views on
                those tables, and to page operators in case things go wrong. To enable this it
                consists of a MySQL dataabase, lots of probe daemons (one daemon per probe), some
                supporting daemons, a PHP website, and other software, like SMS and mail interfaces.</para>
            <para> Things start at the database. For every probe it contains the following tables:</para>
            <itemizedlist>
                <listitem><para>Definition table</para></listitem>
                <listitem><para>Raw results table</para></listitem>
                <listitem><para>Tables for compressed results per day, week, month, year and 5 year</para></listitem>
                <listitem><para>A table with an overview of state changes</para></listitem>
            </itemizedlist>
            <para> The definition table contains, of course, the definition of this particular
                probe, this is of course probe specific but in practive usually contains frequency,
                target ip address, port number, current status.</para>
            <para> The raw results table contains just that, raw probe results.</para>
            <para> Raw results are compressed into period tables in the foilowing way (using week as
                an example): the week is divided into 200 equal timeslots. For computing the plot
                values for a slot the process averages and takes the minimum and maximum value of
                all day-values in that timeframe. The same process happens for the month and year
                tables. This way we ensure that we never have to read more then 200 database records
                to produce a graph for a day, week, month, year or 5-year period.</para>
        </sect1>
        <sect1 id="What_a_probe_does">
            <title>What a probe does</title>
            <para> What a probe does</para>
        </sect1>
        <sect1 id="What_happens_to_the_probe_results">
            <title>What happens to the probe results?</title>
            <para> What happens to the probe results</para>
        </sect1>
        <sect1 id="uw_process_storing_results_in_the_database">
            <title>uw_process: storing results in the database</title>
            <para> uw_process: storing results in the database</para>
        </sect1>
        <sect1 id="Scaling_up">
            <title>Scaling up</title>
            <para> Scaling up</para>
        </sect1>
    </chapter>
    <appendix>
      <title>Interfaces and file layouts</title>
      <sect1 id="Probe_result_file">
      <title>Probe result file</title>
      <para> Every probe result is written into a queue file. This file will be picked up by the process
          emptying the queue, usually uw_send, or uw_process. The file must have a specific name,
	  and a specific layout.
      </para>
      <sect2>
          <title id="Probe_file_name">Probe file name</title>
	  <para> The name of the file is composed of the current epoch time in seconds, microseconds, process
	      id, and hostname, all separated by dots. An example would be:
	  </para>
	  <itemizedlist>
	     <listitem><para>1031601982.341878.27470.ron-ibook.nbs.arts-betel.org</para></listitem>
	  </itemizedlist>
          <para>From a shell you can generate such a name using <command>echo `date +%s`.500.$$.`hostname`</command></para>
      </sect2>
      <sect2>
         <title id="Generic_probe_file_layout">Generic probe file layout</title>
	 <para> The probe result file consists of ASCII lines, separated by linefeeds. The first line has a special format,
	    any following lines are free format, can contain an error text, or some detail text like the HTTP
	    header on a HTTP probe. The format of the first line is:
	 </para>
	 <table label="Header record layout" pgwide="1"><title>Header record layout</title>
            <tgroup cols = "2">
               <colspec colname = "1" colnum = "1" colwidth = "1.0in"/>
               <colspec colname = "2" colnum = "2" colwidth = "1.0in"/>
               <tbody>
                  <row>
                     <entry colname = "1"><para><emphasis>Field:</emphasis></para></entry>
                     <entry colname = "2"><para><emphasis>Type</emphasis></para></entry>
                  </row>
                  <row>
                     <entry colname = "1"><para>method</para></entry>
                     <entry colname = "2"><para>Probe name (for example 'ping')</para></entry>
                  </row>
                  <row>
                     <entry colname = "1"><para>lines</para></entry>
                     <entry colname = "2"><para>Total number of lines including this one</para></entry>
                  </row>
                  <row>
                     <entry colname = "1"><para>probeid</para></entry>
                     <entry colname = "2"><para>Probe id from the database</para></entry>
                  </row>
                  <row>
                     <entry colname = "1"><para>user</para></entry>
                     <entry colname = "2"><para>username for logging into uw_accept</para></entry>
                  </row>
                  <row>
                     <entry colname = "1"><para>password</para></entry>
                     <entry colname = "2"><para>password for loggin in to uw_accept</para></entry>
                  </row>
                  <row>
                     <entry colname = "1"><para>date</para></entry>
                     <entry colname = "2"><para>current date in seconds since epoch</para></entry>
                  </row>
                  <row>
                     <entry colname = "1"><para>expires</para></entry>
                     <entry colname = "2"><para>When this probe expires (seconds since epoch)</para></entry>
                  </row>
                  <row>
                     <entry colname = "1"><para>ipaddress</para></entry>
                     <entry colname = "2"><para>Probe target ip address</para></entry>
                  </row>
                  <row>
                     <entry colname = "1"><para>color</para></entry>
                     <entry colname = "2"><para>200 (green), 300 (yellow) or 500 (red)</para></entry>
                  </row>
                  <row>
                     <entry colname = "1"><para> </para></entry>
                     <entry colname = "2"><para><emphasis>The following fields are probe specific</emphasis></para></entry>
                  </row>
               </tbody>
            </tgroup>
         </table>
      </sect2>
      <sect2>
         <title id="ping_file_layout">ping file layout</title>
         <para>
         </para>
      </sect2>
      </sect1>
      <sect1 id="uw_accept_protocol">
         <title>uw_accept protocol</title>
         <para></para>
      </sect1>
    </appendix>
    <appendix id="Probe_specifications">
       <title>Probe specifications</title>
       <sect1 id="Ping">
          <title>Ping</title>
          <sect2 id="Ping_result_record">
             <title>Ping result record</title>
	 <table label="ping record layout" pgwide="1"><title>ping record layout</title>
            <tgroup cols = "2">
               <colspec colname = "1" colnum = "1" colwidth = "1.0in"/>
               <colspec colname = "2" colnum = "2" colwidth = "1.0in"/>
               <tbody>
                  <row>
                     <entry colname = "1"><para><emphasis>Field:</emphasis></para></entry>
                     <entry colname = "2"><para><emphasis>Type</emphasis></para>
                     </entry>
                  </row>
                    <row>
                     <entry colname = "1"><para><emphasis>.....</emphasis></para></entry>
                     <entry colname = "2"><para><emphasis>Standard header fields...</emphasis></para></entry>
                  </row>
                   <row>
                     <entry colname = "1"><para>minpingtime</para></entry>
                     <entry colname = "2"><para>Shortes measured ping time</para></entry>
                  </row>
                 <row>
                     <entry colname = "1"><para>avgpingtime</para></entry>
                     <entry colname = "2"><para>Average measured ping time</para></entry>
                  </row>
                 <row>
                     <entry colname = "1"><para>maxpingtime</para></entry>
                     <entry colname = "2"><para>Longest measured ping time</para></entry>
                  </row>
                   <row>
                     <entry colname = "1"><para>hostname</para></entry>
                     <entry colname = "2"><para>hostname that was pinged</para></entry>
                  </row>
               </tbody>
            </tgroup>
         </table>
         <para> Any lines following the header record contain error messages.
         </para>
          </sect2>
          <sect2 id="Ping_database_layout">
             <title>Ping databasse layout</title>
             <para></para>
          </sect2>
          <sect2 id="uw_ping_daemon">
             <title>uw_ping daemon</title>
             <para></para>
          </sect2>
       </sect1>
    </appendix>
    <index>
    </index>
</book>
